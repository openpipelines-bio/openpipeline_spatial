name: "from_xenium_to_spatialdata"
namespace: "convert"
version: "build_main"
authors:
- name: "Dorien Roosen"
  roles:
  - "maintainer"
  info:
    role: "Core Team Member"
    links:
      email: "dorien@data-intuitive.com"
      github: "dorien-er"
      linkedin: "dorien-roosen"
    organizations:
    - name: "Data Intuitive"
      href: "https://www.data-intuitive.com"
      role: "Data Scientist"
- name: "Weiwei Schultz"
  roles:
  - "contributor"
  info:
    role: "Contributor"
    organizations:
    - name: "Janssen R&D US"
      role: "Associate Director Data Sciences"
argument_groups:
- name: "Arguments"
  arguments:
  - type: "file"
    name: "--input"
    alternatives:
    - "-i"
    description: "Input folder. Must contain the output from a xenium run."
    info: null
    example:
    - "xenium_data"
    must_exist: true
    create_parent: true
    required: true
    direction: "input"
    multiple: false
    multiple_sep: ";"
  - type: "file"
    name: "--output"
    alternatives:
    - "-o"
    description: "Zarr directory where the SpatialData object will be stored"
    info: null
    example:
    - "xenium_data.zarr"
    must_exist: true
    create_parent: true
    required: false
    direction: "output"
    multiple: false
    multiple_sep: ";"
  - type: "boolean"
    name: "--cells_boundaries"
    description: "Whether to read cell boundaries (polygons)."
    info: null
    default:
    - true
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ";"
  - type: "boolean"
    name: "--nucleus_boundaries"
    description: "Whether to read nucleus boundaries (polygons)."
    info: null
    default:
    - true
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ";"
  - type: "boolean_true"
    name: "--cells_as_circles"
    description: "Whether to read cells also as circles (the center and the radius\
      \ of each circle is computed from the corresponding labels cell)."
    info: null
    direction: "input"
  - type: "boolean"
    name: "--cells_labels"
    description: "Whether to read cell labels (raster). The polygonal version of the\
      \ cell labels are simplified for visualization purposes, and using the raster\
      \ version is recommended for analysis."
    info: null
    default:
    - true
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ";"
  - type: "boolean"
    name: "--transcripts"
    description: "Whether to read transcripts."
    info: null
    default:
    - true
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ";"
  - type: "boolean"
    name: "--nucleus_labels"
    description: "Whether to read nucleus labels (raster). The polygonal version of\
      \ the nucleus labels are simplified for visualization purposes, and using the\
      \ raster version is recommended for analysis."
    info: null
    default:
    - true
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ";"
  - type: "boolean"
    name: "--morphology_mip"
    description: "Whether to read the morphology mip image (available in versions\
      \ < 2.0.0)."
    info: null
    default:
    - true
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ";"
  - type: "boolean"
    name: "--morphology_focus"
    description: "Whether to read the morphology focus image."
    info: null
    default:
    - true
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ";"
  - type: "boolean"
    name: "--aligned_images"
    description: "Whether to also parse, when available, additional H&E or IF aligned\
      \ images. For more control over the aligned images being read, in particular,\
      \ to specify the axes of the aligned images, please set this parameter to False\
      \ and use the xenium_aligned_image function directly."
    info: null
    default:
    - true
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ";"
  - type: "boolean"
    name: "--cells_table"
    description: "Whether to read the cell annotations in the AnnData table."
    info: null
    default:
    - true
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ";"
  - type: "integer"
    name: "--n_jobs"
    info: null
    default:
    - 1
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ";"
resources:
- type: "python_script"
  path: "script.py"
  is_executable: true
- type: "file"
  path: "setup_logger.py"
- type: "file"
  path: "nextflow_labels.config"
  dest: "nextflow_labels.config"
description: "Converts the output from 10X Genomics Xenium dataset into a SpatialData\
  \ objcet.\nBy default, the following files will be converted:\n  - `experiment.xenium`:\
  \ File containing specifications.\n  - `nucleus_boundaries.parquet`: Polygons of\
  \ nucleus boundaries.\n  - `cell_boundaries.parquet`: Polygons of cell boundaries.\n\
  \  - `transcripts.parquet`: File containing transcripts.\n  - `cell_feature_matrix.h5`:\
  \ File containing cell feature matrix.\n  - `cells.parquet`: File containing cell\
  \ metadata.\n  - `morphology_mip.ome.tif`: File containing morphology mip.\n  -\
  \ `morphology_focus.ome.tif`: File containing morphology focus.\n  \n"
test_resources:
- type: "python_script"
  path: "test.py"
  is_executable: true
- type: "file"
  path: "xenium_tiny"
info: null
status: "enabled"
scope:
  image: "public"
  target: "public"
repositories:
- type: "github"
  name: "openpipeline"
  repo: "openpipelines-bio/openpipeline"
  tag: "main_build"
links:
  repository: "https://github.com/openpipelines-bio/openpipeline_spatial"
  docker_registry: "ghcr.io"
runners:
- type: "executable"
  id: "executable"
  docker_setup_strategy: "ifneedbepullelsecachedbuild"
- type: "nextflow"
  id: "nextflow"
  directives:
    label:
    - "lowmem"
    - "singlecpu"
    tag: "$id"
  auto:
    simplifyInput: true
    simplifyOutput: false
    transcript: false
    publish: false
  config:
    labels:
      mem1gb: "memory = 1000000000.B"
      mem2gb: "memory = 2000000000.B"
      mem5gb: "memory = 5000000000.B"
      mem10gb: "memory = 10000000000.B"
      mem20gb: "memory = 20000000000.B"
      mem50gb: "memory = 50000000000.B"
      mem100gb: "memory = 100000000000.B"
      mem200gb: "memory = 200000000000.B"
      mem500gb: "memory = 500000000000.B"
      mem1tb: "memory = 1000000000000.B"
      mem2tb: "memory = 2000000000000.B"
      mem5tb: "memory = 5000000000000.B"
      mem10tb: "memory = 10000000000000.B"
      mem20tb: "memory = 20000000000000.B"
      mem50tb: "memory = 50000000000000.B"
      mem100tb: "memory = 100000000000000.B"
      mem200tb: "memory = 200000000000000.B"
      mem500tb: "memory = 500000000000000.B"
      mem1gib: "memory = 1073741824.B"
      mem2gib: "memory = 2147483648.B"
      mem4gib: "memory = 4294967296.B"
      mem8gib: "memory = 8589934592.B"
      mem16gib: "memory = 17179869184.B"
      mem32gib: "memory = 34359738368.B"
      mem64gib: "memory = 68719476736.B"
      mem128gib: "memory = 137438953472.B"
      mem256gib: "memory = 274877906944.B"
      mem512gib: "memory = 549755813888.B"
      mem1tib: "memory = 1099511627776.B"
      mem2tib: "memory = 2199023255552.B"
      mem4tib: "memory = 4398046511104.B"
      mem8tib: "memory = 8796093022208.B"
      mem16tib: "memory = 17592186044416.B"
      mem32tib: "memory = 35184372088832.B"
      mem64tib: "memory = 70368744177664.B"
      mem128tib: "memory = 140737488355328.B"
      mem256tib: "memory = 281474976710656.B"
      mem512tib: "memory = 562949953421312.B"
      cpu1: "cpus = 1"
      cpu2: "cpus = 2"
      cpu5: "cpus = 5"
      cpu10: "cpus = 10"
      cpu20: "cpus = 20"
      cpu50: "cpus = 50"
      cpu100: "cpus = 100"
      cpu200: "cpus = 200"
      cpu500: "cpus = 500"
      cpu1000: "cpus = 1000"
    script:
    - "includeConfig(\"nextflow_labels.config\")"
  debug: false
  container: "docker"
engines:
- type: "docker"
  id: "docker"
  image: "python:3.12-slim"
  namespace_separator: "/"
  setup:
  - type: "apt"
    packages:
    - "procps"
    interactive: false
  - type: "python"
    user: false
    packages:
    - "spatialdata-io~=0.1.7"
    upgrade: true
  test_setup:
  - type: "apt"
    packages:
    - "git"
    interactive: false
  - type: "python"
    user: false
    packages:
    - "viashpy==0.8.0"
    - "spatialdata~=0.3.0"
    github:
    - "openpipelines-bio/core#subdirectory=packages/python/openpipeline_testutils"
    upgrade: true
  entrypoint: []
  cmd: null
build_info:
  config: "src/convert/from_xenium_to_spatialdata/config.vsh.yaml"
  runner: "nextflow"
  engine: "docker"
  output: "target/nextflow/convert/from_xenium_to_spatialdata"
  executable: "target/nextflow/convert/from_xenium_to_spatialdata/main.nf"
  viash_version: "0.9.3"
  git_commit: "7f820d2607f3e1fabc0183915d1bb427715e18ae"
  git_remote: "https://github.com/openpipelines-bio/openpipeline_spatial"
package_config:
  name: "openpipeline_spatial"
  version: "build_main"
  info:
    test_resources:
    - type: "s3"
      path: "s3://openpipelines-bio/openpipeline_spatial/resources_test"
      dest: "resources_test"
  repositories:
  - type: "github"
    name: "openpipeline"
    repo: "openpipelines-bio/openpipeline"
    tag: "main_build"
  viash_version: "0.9.3"
  source: "src"
  target: "target"
  config_mods:
  - ".resources += {path: '/src/labels.config', dest: 'nextflow_labels.config'}\n\
    .runners[.type == 'nextflow'].config.script := 'includeConfig(\"nextflow_labels.config\"\
    )'"
  organization: "openpipelines-bio"
  links:
    repository: "https://github.com/openpipelines-bio/openpipeline_spatial"
    docker_registry: "ghcr.io"
